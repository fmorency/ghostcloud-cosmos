// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ghostcloud/ghostcloud/tx.proto

package ghostcloud

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_CreateDeployment_FullMethodName = "/ghostcloud.ghostcloud.Msg/CreateDeployment"
	Msg_UpdateDeployment_FullMethodName = "/ghostcloud.ghostcloud.Msg/UpdateDeployment"
	Msg_RemoveDeployment_FullMethodName = "/ghostcloud.ghostcloud.Msg/RemoveDeployment"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	CreateDeployment(ctx context.Context, in *MsgCreateDeploymentRequest, opts ...grpc.CallOption) (*MsgCreateDeploymentResponse, error)
	UpdateDeployment(ctx context.Context, in *MsgUpdateDeploymentRequest, opts ...grpc.CallOption) (*MsgUpdateDeploymentResponse, error)
	RemoveDeployment(ctx context.Context, in *MsgRemoveDeploymentRequest, opts ...grpc.CallOption) (*MsgRemoveDeploymentResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDeployment(ctx context.Context, in *MsgCreateDeploymentRequest, opts ...grpc.CallOption) (*MsgCreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgCreateDeploymentResponse)
	err := c.cc.Invoke(ctx, Msg_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDeployment(ctx context.Context, in *MsgUpdateDeploymentRequest, opts ...grpc.CallOption) (*MsgUpdateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveDeployment(ctx context.Context, in *MsgRemoveDeploymentRequest, opts ...grpc.CallOption) (*MsgRemoveDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveDeploymentResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	CreateDeployment(context.Context, *MsgCreateDeploymentRequest) (*MsgCreateDeploymentResponse, error)
	UpdateDeployment(context.Context, *MsgUpdateDeploymentRequest) (*MsgUpdateDeploymentResponse, error)
	RemoveDeployment(context.Context, *MsgRemoveDeploymentRequest) (*MsgRemoveDeploymentResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) CreateDeployment(context.Context, *MsgCreateDeploymentRequest) (*MsgCreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedMsgServer) UpdateDeployment(context.Context, *MsgUpdateDeploymentRequest) (*MsgUpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedMsgServer) RemoveDeployment(context.Context, *MsgRemoveDeploymentRequest) (*MsgRemoveDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeployment not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDeployment(ctx, req.(*MsgCreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDeployment(ctx, req.(*MsgUpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveDeployment(ctx, req.(*MsgRemoveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghostcloud.ghostcloud.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _Msg_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Msg_UpdateDeployment_Handler,
		},
		{
			MethodName: "RemoveDeployment",
			Handler:    _Msg_RemoveDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ghostcloud/ghostcloud/tx.proto",
}
